// components/district-page-client.tsx
"use client"

import { useState, useRef, useLayoutEffect, useEffect, Suspense, forwardRef } from "react"
// **FIXED/ADDED Next.js Imports for Navigation**
import { useRouter, usePathname, useSearchParams } from "next/navigation" 
import { MetricCard } from "@/components/metric-card" 
import { TrendChart } from "@/components/trend-chart"
import { Comparison } from "@/components/comparison"
import HomeButton from "@/components/home-button"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"

// --- Type Definitions (Must match data structure) ---
type MetricsData = { updatedAtHuman: string; stale: boolean; cards: Record<string, any>; };
type TrendData = Array<{ year: number; month: number; persondays: number; householdsWorked: number; wageExpenditure: number }>;

// Metric Card Specifications (used for mapping the MetricCards)
const metricCardsList = [
    { title: "Persondays", subtitle: "काम के दिन", value: "persondays", help: "Total persondays generated." },
    { title: "Households Worked", subtitle: "काम करने वाले परिवार", value: "householdsWorked", help: "Households that worked in the month." },
    { title: "Avg Days/HH", subtitle: "औसत दिन/परिवार", value: "avgDaysPerHH", help: "Average days of employment per household." },
    { title: "Wage Expenditure", subtitle: "मजदूरी खर्च", value: "wageExpenditure", help: "Total wage expenditure in ₹.", format: "currency" as const },
    { title: "Total Workers", subtitle: "कुल कामगार", value: "totalWorkers", help: "Total number of workers employed." },
    { title: "Women Persondays", subtitle: "महिला दिन", value: "womenPersondays", help: "Total persondays generated by women." },
    { title: "Avg Wage Rate", subtitle: "औसत मजदूरी दर", value: "avgWageRate", help: "Average wage rate per day per person.", format: "currency" as const },
    { title: "Completed Works", subtitle: "पूरा हुआ काम", value: "numCompletedWorks", help: "Number of works completed." },
    { title: "Ongoing Works", subtitle: "चल रहे काम", value: "numOngoingWorks", help: "Number of works currently ongoing." },
    { title: "SC Persondays", subtitle: "अनुसूचित जाति दिन", value: "scPersondays", help: "Persondays generated by Scheduled Caste workers." },
    { title: "ST Persondays", subtitle: "अनुसूचित जनजाति दिन", value: "stPersondays", help: "Persondays generated by Scheduled Tribe workers." },
    { title: "Total Expenditure", subtitle: "कुल खर्च", value: "totalExpenditure", help: "Total expenditure in ₹.", format: "currency" as const },
    { title: "Admin Expenditure", subtitle: "प्रशासनिक खर्च", value: "totalAdminExpenditure", help: "Total administrative expenditure in ₹.", format: "currency" as const },
    { title: "Job Cards Issued", subtitle: "जॉब कार्ड जारी", value: "totalJobCardsIssued", help: "Number of job cards issued." },
    { title: "Active Job Cards", subtitle: "सक्रिय जॉब कार्ड", value: "totalActiveJobCards", help: "Number of active job cards." },
    { title: "Active Workers", subtitle: "सक्रिय कामगार", value: "totalActiveWorkers", help: "Number of active workers." },
    { title: "Works Taken Up", subtitle: "शुरू किया गया काम", value: "totalWorksTakenup", help: "Number of works taken up this month." },
    { title: "HHS Completed 100 Days", subtitle: "100 दिन पूरे किए परिवार", value: "totalHhsCompleted100Days", help: "Households that completed 100 days of employment." },
    { title: "Material & Skilled Wages", subtitle: "सामग्री और कुशल मजदूरी", value: "materialAndSkilledWages", help: "Expenditure on material and skilled wages.", format: "currency" as const },
    { title: "Differently Abled Worked", subtitle: "विकलांग कामगार", value: "differentlyAbledPersonsWorked", help: "Number of differently abled persons who worked." },
];

function monthLabel(m: number) {
  return new Date(2000, m - 1, 1).toLocaleString("en-IN", { month: "long" })
}

// **New Year Options Logic**
const currentYear = new Date().getFullYear();
const yearOptions = Array.from({ length: 5 }, (_, i) => currentYear - i);

// 🚀 The main Client Component
export function DistrictPageClient({
    stateName,
    districtName,
    month,
    year,
    metrics,
    trend,
}: {
    stateName: string;
    districtName: string;
    month: number;
    year: number;
    metrics: MetricsData;
    trend: TrendData;
}) {
    // **ADDED Next.js Navigation Hooks**
    const router = useRouter();
    const pathname = usePathname();
    const searchParams = useSearchParams();

    const [step, setStep] = useState(0);
    const [showOverlay, setShowOverlay] = useState(false);
    const [tooltipPos, setTooltipPos] = useState<{ top: number; left: number } | null>(null);

    // Refs for the elements we want to highlight
    const homeButtonRef = useRef<HTMLDivElement>(null);
    const trendChartRef = useRef<HTMLDivElement>(null);
    const comparisonRef = useRef<HTMLDivElement>(null);
    const persondaysMetricRef = useRef<HTMLDivElement>(null);
    const wageExpenditureMetricRef = useRef<HTMLDivElement>(null);

    // Steps for the guided tour/demo
    const steps = [
        { ref: homeButtonRef, text: "Demo Step 1: Click the Home Button to easily navigate back to the state selection page." },
        { ref: trendChartRef, text: "Demo Step 2: The 12-Month Trend chart provides a historical context for the district's performance across key metrics." },
        { ref: comparisonRef, text: "Demo Step 3: Use the Comparison panel to select up to two other districts and benchmark performance." },
    ];

    const isActive = (ref: React.RefObject<any>) => steps[step]?.ref === ref;

    // 🚀 Auto-start the tour once on mount (kept the same)
    useEffect(() => {
        if (typeof window === "undefined") return
        const visitedKey = `visited_district_page_tour`;
        const visited = localStorage.getItem(visitedKey);
        
        if (!visited) {
            setShowOverlay(true);
            localStorage.setItem(visitedKey, "true");
        }
    }, []);

    // 🚀 useLayoutEffect logic to handle positioning AND scrolling for every step (kept the same)
    useLayoutEffect(() => {
        if (!showOverlay || step >= steps.length) {
            setTooltipPos(null);
            return;
        }

        const currentRef = steps[step]?.ref.current;
        if (!currentRef) {
            setTooltipPos(null);
            return;
        }

        currentRef.scrollIntoView({ behavior: 'smooth', block: 'center' });

        const calculatePosition = () => {
            const rect = currentRef.getBoundingClientRect();
            const offset = 10;
            const scrollY = window.scrollY;
            
            setTooltipPos({
                top: rect.bottom + scrollY + offset,
                left: rect.left + rect.width / 2,
            });
        };

        const id = requestAnimationFrame(calculatePosition);
        return () => cancelAnimationFrame(id);

    }, [step, showOverlay, steps.length]);


// In components/district-page-client.tsx
function nextStep() {
    if (step < steps.length - 1) {
        console.log(`Moving from step ${step + 1} to step ${step + 2}`); 
        setStep(step + 1); 
    }
    else if (step === steps.length - 1) {
        console.log("Tour finished. Closing overlay.");
        setShowOverlay(false);
    }
    else {
        setShowOverlay(false);
    }
}

function closeTooltip() {
    setShowOverlay(false)
}

const getMetricRef = (valueKey: string) => {
    if (valueKey === 'persondays') return persondaysMetricRef;
    if (valueKey === 'wageExpenditure') return wageExpenditureMetricRef;
    return undefined;
};

// **New Year Change Handler Logic**
const handleYearChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const newYear = event.target.value;
    const currentSearchParams = new URLSearchParams(searchParams.toString());
    currentSearchParams.set('year', newYear);
    // When the year changes, it's safer to remove the month parameter 
    // to prevent fetching data for a combination that doesn't exist (e.g., future month in past year).
    currentSearchParams.delete('month'); 
    router.push(`${pathname}?${currentSearchParams.toString()}`);
};
    return (
        <main className="min-h-dvh relative">
            {/* Overlay */}
            {showOverlay && <div className="fixed inset-0 bg-black/30 backdrop-blur-sm z-40" />}

            {/* Header */}
<header className={`w-full border-b bg-card relative z-50 ${!isActive(homeButtonRef) && showOverlay ? "blur-sm pointer-events-none" : ""}`}>
    <div className="mx-auto max-w-5xl px-4 py-4 flex flex-col md:flex-row md:items-center md:justify-between **gap-4**">
            <div ref={homeButtonRef as React.RefObject<HTMLDivElement>} className={`${isActive(homeButtonRef) ? "relative z-50" : ""} **mr-4**`}> 
                <HomeButton /> 
            </div>

        {/* Left Group (Title & Home) - Vertically Centered */}
        <div className="flex items-center">
            {/* Wrapper for HomeButton to attach ref */}
            
            {/* Title Block - Left-aligned text */}
            <div className="flex flex-col **items-start** min-w-0">
                <h1 className="text-xl font-semibold **truncate**">
                    {districtName}, {stateName}
                </h1>
                <span className="text-sm text-muted-foreground">
                    MGNREGA Performance — {monthLabel(month)} {year} / मनरेगा प्रदर्शन
                </span>
            </div>
        </div>

        {/* Right Group (Year & Update Info) - Vertically Stacked and Right-aligned on Desktop */}
        <div className="flex flex-col **items-start md:items-end** text-sm text-muted-foreground **mt-4 md:mt-0** **gap-2**">
            
            {/* Year Selector */}
            <div className="flex items-center gap-2 text-sm text-foreground">
                <label htmlFor="year-select" className="font-medium text-muted-foreground">Data Year:</label>
                <select
                    id="year-select"
                    value={year} 
                    onChange={handleYearChange}
                    className="border rounded-md px-2 py-1 text-sm bg-background/50 border-foreground/30 disabled:opacity-50"
                    disabled={showOverlay} 
                >
                    {yearOptions.map(y => (
                        <option key={y} value={y}>{y}</option>
                    ))}
                </select>
            </div>
            
            {/* Last Updated Info */}
            <p className="text-xs">{`Last updated: ${metrics.updatedAtHuman}`}</p>
            {metrics.stale && (
                <p className="text-destructive text-xs">
                    Showing last known data due to API issues.
                </p>
            )}
        </div>
    </div>
</header>            
            {/* Trend and Comparison */}
            <section className="mx-auto max-w-5xl px-4 pb-6 mt-6 grid gap-4 lg:grid-cols-3">
                
                {/* Trend chart */}
                <Card 
                    className={`lg:col-span-2 border-2 relative z-50 ${!isActive(trendChartRef) && showOverlay ? "blur-sm pointer-events-none" : ""}`} 
                    ref={trendChartRef as React.RefObject<HTMLDivElement>}
                >
                    <CardContent className="p-4">
                        <h2 className="text-lg font-semibold text-pretty mb-2">
                            12-Month Trend / 12 माह का रुझान
                        </h2>
                        <div className="h-[220px] flex">
                            <div className="w-full">
                                <Suspense fallback={<div className="text-sm text-muted-foreground">Loading chart...</div>}>
                                    <TrendChart data={trend} />
                                </Suspense>
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* Comparison */}
                <Card 
                    className={`border-2 relative z-50 ${!isActive(comparisonRef) && showOverlay ? "blur-sm pointer-events-none" : ""}`} 
                    ref={comparisonRef as React.RefObject<HTMLDivElement>}
                >
                    <CardContent className="p-4">
                        <h2 className="text-lg font-semibold text-pretty mb-2">Compare / तुलना</h2>
                    <Comparison
                    stateName={stateName}
                    districtName={districtName}
                    month={month}
                    year={year}
                    />
                    </CardContent>
                </Card>
            </section>

            {/* Metrics */}
            <section className="mx-auto max-w-5xl px-4 py-6 grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                {metricCardsList.map((card) => (
                    // Attach the ref and dynamic class to the MetricCard
                    <MetricCard 
                        key={card.title}
                        // Ref is attached here
                        ref={getMetricRef(card.value)}
                        title={card.title}
                        subtitle={card.subtitle}
                        value={metrics.cards[card.value]}
                        help={card.help}
                        format={card.format}
                        // Class is used to blur non-active elements during the tour
                        className={`relative z-50 ${!isActive(getMetricRef(card.value)) && showOverlay ? "blur-sm pointer-events-none" : ""}`}
                    />
                ))}
            </section>

            {/* Tooltip/Demo UI */}
            {showOverlay && tooltipPos && (
                <div
                    style={{ top: tooltipPos.top, left: tooltipPos.left, transform: 'translateX(-50%)' }}
                    className="fixed z-[60] bg-blue-800 border-2 border-blue-400 text-white p-4 rounded-lg shadow-2xl pointer-events-auto max-w-xs transition-all duration-300"
                >
                    <p>{steps[step].text}</p>
                    <div className="flex justify-between gap-2 mt-3">
                        <span className="text-sm text-gray-300 self-center">Step {step + 1} of {steps.length}</span>
                        <div className="flex gap-2">
                            <Button size="sm" variant="outline" onClick={closeTooltip} className="bg-white text-blue-800 border-blue-400 hover:bg-gray-100">
                                Skip
                            </Button>
                            <Button size="sm" onClick={nextStep} className="bg-blue-400 text-white hover:bg-blue-300">
                                {step < steps.length - 1 ? "Next" : "Finish"}
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </main>
    );
}
